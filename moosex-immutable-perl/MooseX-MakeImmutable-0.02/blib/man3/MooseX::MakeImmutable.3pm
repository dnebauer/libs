.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "MooseX::MakeImmutable 3pm"
.TH MooseX::MakeImmutable 3pm "2008-08-15" "perl v5.20.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
MooseX::MakeImmutable \- A convenient way to make many Moosen immutable (or mutable) in one shot
.SH "VERSION"
.IX Header "VERSION"
Version 0.02
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    package MyPackage;
\&
\&    use Moose;
\&    use MooseX::MakeImmutable;
\&
\&    ...
\&
\&    MooseX::MakeImmutable\->lock_down;
\&    # MyPackage and any subdordinate Moose classes are made immutable
\&    # Use MooseX::MakeImmutable\->open_up to do the opposite
.Ve
.PP
You can also make classes im/mutable with fine-grained control:
.PP
.Vb 1
\&    use MooseX::MakeImmutable;
\&
\&    ...
\&
\&    my $manifest = <<_MANIFEST_;
\&
\&        My::Moose::Hierarchy::Alpha
\&        My::Moose::Hierarchy::Bravo
\&        My::Moose::Hierarchy::Charlie
\&
\&         # Comments (lines leading with a pound) and blank lines are ignored by the finder
\&        My::Moose::Hierarchy::Delta::*
\&            # Not strict about leading/trailing whitespace either
\&         My::Moose::Hierarchy::Epsilon::+
\&
\&    _MANIFEST_
\&
\&    MooseX::MakeImmutable\->make_immutable($manifest);
\&
\&    # The above code has the following effects:
\&    #
\&    # ::Alpha, ::Bravo, and ::Charlie are now immutable (if they exist)
\&    #
\&    # Every Moose::Object under the Delta:: namespace is now immutable
\&    #   (although ::Delta, if a Moose::Object, IS still mutable)
\&    #
\&    # Every Moose::Object under the Epsilon:: namespace, including
\&    #   ::Epsilon is now mutable
\&
\&    # You can also use MooseX::MakeImmutable to make something mutable again:
\&    MooseX::MakeImmutable\->make_mutable("My::Moose::Hierarchy::Epsilon::+")
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
MooseX::MakeImmutable is a tool for loading every Moose::Object within a hierarchy and making each immutable/mutable. It uses Module::Pluggable for searching and will load both inner and .pm packages.
.PP
In a nutshell, if you add a Moose-based package to your object hierarchy, then MooseX::MakeImmutable, given a proper manifest, will pick it up and mark it im/mutable (without you having to manually write-out the new package).
.PP
\&\s-1NOTE:\s0 The name \*(L"MakeImmutable\*(R" is a bit of a misnomer, since this package can both make_immutable \s-1AND\s0 make_mutable. However, 90% of the time, you'll probably be using \->make_immutable
.SS "Writing a MooseX::MakeImmutable::Finder manifest"
.IX Subsection "Writing a MooseX::MakeImmutable::Finder manifest"
A manifest consists of one package per line
.PP
For each line, leading and trailing whitespace is stripped
.PP
Lines that are blank or begin with a pound (#) are skipped
.PP
A package with a trailing ::* \s-1IS NOT\s0 made im/mutable, but every package under that namespace is
.PP
A package with a trailing ::+ or :: \s-1IS\s0 made im/mutable, along with every package under that namespace
.SH "METHODS"
.IX Header "METHODS"
.SS "MooseX::MakeImmutable\->lock_down( [ package => <package> ], ... )"
.IX Subsection "MooseX::MakeImmutable->lock_down( [ package => <package> ], ... )"
Make everything immutable from <package> on downward
.PP
If <package> is not specified, then the package will be gotten from caller. This means you can do something like:
.PP
.Vb 1
\&    package MyPackage;
\&
\&    use Moose;
\&    use MooseX::MakeImmutable;
\&
\&    ...
\&
\&    MooseX::MakeImmutable\->lock_down;
\&    # Effectively the same as MooseX::MakeImmutable\->make_immutable(\*(AqMyPackage::+\*(Aq);
.Ve
.PP
Any remaining arguments will be passed through to \->make_immutable
.SS "MooseX::MakeImmutable\->open_up( [ package => <package> ], ... )"
.IX Subsection "MooseX::MakeImmutable->open_up( [ package => <package> ], ... )"
Make everything mutable from <package> on downward
.PP
If <package> is not specified, then the package will be gotten from caller. This means you can do something like:
.PP
.Vb 1
\&    package MyPackage;
\&
\&    use Moose;
\&    use MooseX::MakeImmutable;
\&
\&    ...
\&
\&    MooseX::MakeImmutable\->open_up;
\&    # Effectively the same as MooseX::MakeImmutable\->make_mutable(\*(AqMyPackage::+\*(Aq);
.Ve
.PP
Any remaining arguments will be passed through to \->make_mutable
.SS "MooseX::MakeImmutable\->freeze( <manifest>, ... )"
.IX Subsection "MooseX::MakeImmutable->freeze( <manifest>, ... )"
.SS "MooseX::MakeImmutable\->make_immutable( <manifest>, ... )"
.IX Subsection "MooseX::MakeImmutable->make_immutable( <manifest>, ... )"
Create a finder from <manifest> and make each found Moose::Object immutable
.PP
Any extra passed-in options will be forwarded to \->meta\->make_immutable(...) excepting \f(CW\*(C`include_inner\*(C'\fR and \f(CW\*(C`exclude\*(C'\fR, which are used to configure the finder.
.PP
\&\f(CW\*(C`freeze\*(C'\fR is an alias for \f(CW\*(C`make_immutable\*(C'\fR
.SS "MooseX::MakeImmutable\->thaw( <manifest>, ... )"
.IX Subsection "MooseX::MakeImmutable->thaw( <manifest>, ... )"
.SS "MooseX::MakeImmutable\->make_mutable( <manifest>, ... )"
.IX Subsection "MooseX::MakeImmutable->make_mutable( <manifest>, ... )"
Create a finder from <manifest> and make each found Moose::Object mutable
.PP
Any extra passed-in options will be forwarded to \->meta\->make_mutable(...) excepting \f(CW\*(C`include_inner\*(C'\fR and \f(CW\*(C`exclude\*(C'\fR, which are used to configure the finder.
.PP
\&\f(CW\*(C`thaw\*(C'\fR is an alias for \f(CW\*(C`make_mutable\*(C'\fR
.SS "MooseX::MakeImmutable\->finder( ... )"
.IX Subsection "MooseX::MakeImmutable->finder( ... )"
Create and return a MooseX::MakeImmutable::Finder object
.PP
The returned object uses Module::Pluggable to scan the specified namespace(s) for potential Moose objects. It accepts the following options:
.PP
.Vb 1
\&    manifest            The finder manifest, described above
\&
\&    include_inner       If true, then the finder will "find" inner Moose packages. On by default
\&
\&    exclude             A list where each item is one of:
\&
\&                        * A package name to be excluded (string)
\&                        * A regular expression that matches if a package should be excluded 
\&                        * A CODE block returning true if a package should be excluded (the package name is passed in as the first argument)
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Moose
.SH "AUTHOR"
.IX Header "AUTHOR"
Robert Krimen, \f(CW\*(C`<rkrimen at cpan.org>\*(C'\fR
.SH "SOURCE"
.IX Header "SOURCE"
You can contribute or fork this project via GitHub:
.PP
<http://github.com/robertkrimen/moosex\-makeimmutable/tree/master>
.PP
.Vb 1
\&    git clone git://github.com/robertkrimen/moosex\-makeimmutable.git MooseX\-MakeImmutable
.Ve
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or feature requests to \f(CW\*(C`bug\-moosex\-mutate at rt.cpan.org\*(C'\fR, or through
the web interface at <http://rt.cpan.org/NoAuth/ReportBug.html?Queue=MooseX\-MakeImmutable>.  I will be notified, and then you'll
automatically be notified of progress on your bug as I make changes.
.SH "SUPPORT"
.IX Header "SUPPORT"
You can find documentation for this module with the perldoc command.
.PP
.Vb 1
\&    perldoc MooseX::MakeImmutable
.Ve
.PP
You can also look for information at:
.IP "\(bu" 4
\&\s-1RT: CPAN\s0's request tracker
.Sp
<http://rt.cpan.org/NoAuth/Bugs.html?Dist=MooseX\-MakeImmutable>
.IP "\(bu" 4
AnnoCPAN: Annotated \s-1CPAN\s0 documentation
.Sp
<http://annocpan.org/dist/MooseX\-MakeImmutable>
.IP "\(bu" 4
\&\s-1CPAN\s0 Ratings
.Sp
<http://cpanratings.perl.org/d/MooseX\-MakeImmutable>
.IP "\(bu" 4
Search \s-1CPAN\s0
.Sp
<http://search.cpan.org/dist/MooseX\-MakeImmutable>
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
.SH "COPYRIGHT & LICENSE"
.IX Header "COPYRIGHT & LICENSE"
Copyright 2008 Robert Krimen, all rights reserved.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
