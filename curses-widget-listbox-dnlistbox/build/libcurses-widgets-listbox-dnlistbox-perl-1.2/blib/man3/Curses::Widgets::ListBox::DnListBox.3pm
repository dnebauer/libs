.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Curses::Widgets::ListBox::DnListBox 3pm"
.TH Curses::Widgets::ListBox::DnListBox 3pm "2021-10-30" "perl v5.32.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Curses::Widgets::ListBox::DnListBox \- Customised List Box Widget
.SH "MODULE VERSION"
.IX Header "MODULE VERSION"
# \f(CW$Id:\fR DnListBox.pm,v 1.2 2008/09/06 04:17:38 David_Nebauer Exp $
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&        use Curses::Widgets::ListBox::DnListBox;
\&
\&        $lb = Curses::Widgets::ListBox::DnListBox\->new({});
\&
\&        See the Curses::Widgets pod for other methods.
.Ve
.SH "REQUIREMENTS"
.IX Header "REQUIREMENTS"
.IP "Curses" 4
.IX Item "Curses"
.PD 0
.IP "Curses::Widgets" 4
.IX Item "Curses::Widgets"
.IP "Curses::Widgets::ListBox" 4
.IX Item "Curses::Widgets::ListBox"
.PD
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Curses::Widgets::ListBox::DnListBox is an extension of the standard
Curses::Widgets::ListBox that allows the same key to be used for
\&\s-1TOGGLE\s0 and \s-1FOCUSSWITCH,\s0 i.e., select item and exit with same key.
.SH "METHODS"
.IX Header "METHODS"
.SS "new ( inherited from Curses::Widgets )"
.IX Subsection "new ( inherited from Curses::Widgets )"
.Vb 1
\&        $tm = Curses::Widgets::ListBox\->new( {} );
.Ve
.PP
All of the same key values apply here as they do for the parent class
Curses::Widgets::ListBox.
.SS "execute"
.IX Subsection "execute"
.Vb 1
\&        $obj\->execute( $mwh );
.Ve
.PP
This method puts the widget into interactive mode, which consists of
calling the \fBdraw\fR method, scanning for keyboard input, feeding it
to the \fBinput_key\fR method, and redrawing.
.PP
execute uses the widget's configuration information to allow easy
modification of its behavoiur.  First, it checks for the existance of
a \s-1INPUTFUNC\s0 key.  Setting its value to a subroutine reference allows
you to substitute any custom keyboard scanning/polling routine in leiu
of the default  \fBscankey\fR provided by this module.
.PP
The original execute method (defined in Curses::Widgets) then checked
whether to exit due to a match on \s-1FOCUSSWITCH\s0 before processing the
input key.  This effectively prevented the same key being used for
both \s-1TOGGLE\s0 and \s-1FOCUSSWITCH,\s0 i.e., one key item selection.  This version
of execute reverses that order, first processing the input key before
checking whether to exit.  If the same key is defined for both \s-1TOGGLE\s0 and
\&\s-1FOCUSSWITCH\s0 it is possible to select a menu item and exit using one key.
.PP
The only argument is a handle to a valid curses window object.
.PP
\&\fB\s-1NOTE\s0\fR:  If \et is in your regex, \s-1KEY_STAB\s0 will also be a trigger for a focus
switch.
.SH "HISTORY"
.IX Header "HISTORY"
.IP "1999/12/29 \*(-- Original list box widget in functional model" 4
.IX Item "1999/12/29 Original list box widget in functional model"
.PD 0
.IP "2001/07/05 \*(-- First incarnation in \s-1OO\s0 architecture" 4
.IX Item "2001/07/05 First incarnation in OO architecture"
.IP "2008/09/07 \*(-- DnListBox derived from ListBox" 4
.IX Item "2008/09/07 DnListBox derived from ListBox"
.PD
.SH "AUTHOR/COPYRIGHT"
.IX Header "AUTHOR/COPYRIGHT"
(c) 2008 David Nebauer <david@nebauer.org>
