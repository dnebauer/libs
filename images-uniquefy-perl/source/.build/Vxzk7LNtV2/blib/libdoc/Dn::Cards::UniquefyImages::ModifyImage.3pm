.\" Automatically generated by Pod::Man 4.07 (Pod::Simple 3.32)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Dn::Cards::UniquefyImages::ModifyImage 3pm"
.TH Dn::Cards::UniquefyImages::ModifyImage 3pm "2017-03-07" "perl v5.24.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Dn::Cards::UniquefyImages::ModifyImage \- modify image pixels
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    use Dn::Cards::UniquefyImages::ModifyImage;
\&    ...
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module is intended to be used by the Dn::Cards::UniquefyImages module, and
that is probably the module you should use.
.PP
This module assists in modifying pixel color. In particular, it modifies a
single color component (red, green or blue) of a specified pixel by a given
increment.
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
.SS "filepath"
.IX Subsection "filepath"
Path to input image file.
.SS "width"
.IX Subsection "width"
Image width in pixels. Read-only. Will cause module to die if image filepath
has not been set.
.SS "height"
.IX Subsection "height"
Image height in pixels. Read-only. Will cause module to die if image filepath
has not been set.
.SH "METHODS"
.IX Header "METHODS"
.SS "\fImodify_pixel()\fP"
.IX Subsection "modify_pixel()"
Modify pixel color component. Requires that the following have been provided:
image file (\f(CW\*(C`filepath\*(C'\fR attribute), pixel coordinates (\f(CW\*(C`pixel_coords\*(C'\fR method)
and color component (\f(CW\*(C`pixel_rgb_component_index\*(C'\fR method).
.PP
\fIParams\fR
.IX Subsection "Params"
.PP
Nil.
.PP
\fIPrints\fR
.IX Subsection "Prints"
.PP
Error messages if the operation fails.
.PP
\fIReturns\fR
.IX Subsection "Returns"
.PP
Nil. Image object is edited in place and method dies on failure.
.SS "pixel_rgb_component_index([$index])"
.IX Subsection "pixel_rgb_component_index([$index])"
Setter and getter for index of pixel rgb component to modify.
.PP
\fIParams\fR
.IX Subsection "Params"
.ie n .IP "$index" 4
.el .IP "\f(CW$index\fR" 4
.IX Item "$index"
Index of rgb color component to modify. Optional. If this parameter is supplied
it is set. Value is not provided when method is called as a getter. Must be an
integer in the range 0\-2.
.PP
\fIPrints\fR
.IX Subsection "Prints"
.PP
Nil.
.PP
\fIReturns\fR
.IX Subsection "Returns"
.PP
If called as setter: no meaningful value is returned.
.PP
If called as getter: scalar integer is returned.
.PP
method pixel_rgb_component_index ($index = undef) {
.SS "pixel_coords([$x], [$y])"
.IX Subsection "pixel_coords([$x], [$y])"
Setter and getter for x and y coordinates of pixel to be modified.
.PP
\fIParams\fR
.IX Subsection "Params"
.ie n .IP "$x" 4
.el .IP "\f(CW$x\fR" 4
.IX Item "$x"
X\-coordinate of pixel to be modified. Optional. If value is provided it is set.
Value is not provided when method is called as a getter.
.ie n .IP "$y" 4
.el .IP "\f(CW$y\fR" 4
.IX Item "$y"
Y\-coordinate of pixel to be modified. Optional. If value is provided it is set.
Value is not provided when method is called as a getter.
.PP
\fIPrints\fR
.IX Subsection "Prints"
.PP
Nil.
.PP
\fIReturns\fR
.IX Subsection "Returns"
.PP
If called as setter: no meaningful value is returned.
.PP
If called as getter: list of integers ($x, \f(CW$y\fR).
.SS "write_file($filepath)"
.IX Subsection "write_file($filepath)"
Write image to file.
.PP
\fIParams\fR
.IX Subsection "Params"
.ie n .IP "$filepath" 4
.el .IP "\f(CW$filepath\fR" 4
.IX Item "$filepath"
Path of file to write.
.PP
\fIPrints\fR
.IX Subsection "Prints"
.PP
Error messages on failure.
.PP
\fIReturns\fR
.IX Subsection "Returns"
.PP
Nil. Method dies on failure.
.SH "CONFIGURATION AND ENVIRONMENT"
.IX Header "CONFIGURATION AND ENVIRONMENT"
There are no configuration files used. There are no module/role settings.
.SH "DEPENDENCIES"
.IX Header "DEPENDENCIES"
.SS "Perl modules"
.IX Subsection "Perl modules"
autodie, Carp, Dn::Role, English, Function::Parameters, Moo, MooX::HandlesVia,
namespace::clean, Readonly, strictures, Types::Standard, version.
.SS "\s-1INCOMPATIBILITIES\s0"
.IX Subsection "INCOMPATIBILITIES"
There are no known incompatibilities with other modules.
.SH "BUGS AND LIMITATIONS"
.IX Header "BUGS AND LIMITATIONS"
Please report any bugs to the author.
.SH "AUTHOR"
.IX Header "AUTHOR"
David Nebauer <davidnebauer@hotkey.net.au>
.SH "LICENSE AND COPYRIGHT"
.IX Header "LICENSE AND COPYRIGHT"
Copyright (c) 2017 David Nebauer (david at nebauer dot org)
.PP
This script is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
