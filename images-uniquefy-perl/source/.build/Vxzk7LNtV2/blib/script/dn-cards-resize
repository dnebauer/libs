#!/usr/bin/perl

use Moo;    #                                                          {{{1
use strictures 2;
use 5.006;
use 5.22.1;
use version; our $VERSION = qv('0.1');
use namespace::clean;    #                                             }}}1

{

    package Dn::Internal;

    use Moo;             # {{{1
    use strictures 2;
    use namespace::clean -except => [ '_options_data', '_options_config' ];
    use Dn::Cards::Resize;
    use English qw(-no_match_vars);
    use Function::Parameters;
    use List::MoreUtils qw(uniq);
    use MooX::HandlesVia;
    use MooX::Options protect_argv => 0;
    use Readonly;
    use Types::Standard;

    with qw(
        Dn::Role::HasPath
    );

    Readonly my $TRUE  => 1;
    Readonly my $FALSE => 0;    #                                      }}}1

    # options

    # card_type           (-t)                                         {{{1
    option 'card_type' => (
        is      => 'ro',
        format  => 's',
        default => '',
        short   => 't',
        doc     => q{Card type ('bridge', 'european', 'euromini', }
            . q{'large', 'mini', 'poker', 'square', 'tarot')},
    );

    # ignore_aspect_ratio (-i)                                         {{{1
    option 'ignore_aspect_ratio' => (
        is    => 'ro',
        short => 'i',
        doc   => 'Enlarge in both axes to new size, ignoring aspect ratio',
    );

    # width                                                            {{{1
    option 'width' => (
        is     => 'ro',
        format => 'i',
        doc    => 'Resize width in pixels',
    );

    # height                                                           {{{1
    option 'height' => (
        is     => 'ro',
        format => 'i',
        doc    => 'Resize height in pixels',
    );

    # bleed_horizontal                                                 {{{1
    option 'bleed_horizontal' => (
        is      => 'ro',
        format  => 'i',
        default => 0,
        doc     => 'Size of left and right bleed borders in pixels',
    );

    # bleed_vertical                                                   {{{1
    option 'bleed_vertical' => (
        is      => 'ro',
        format  => 'i' i,
        default => 0,
        doc     => 'Size of top and bottom bleed borders in pixels',
    );

    # bleed_color                                                      {{{1
    option 'bleed_color' => (
        is      => 'ro',
        format  => 's',
        default => 'none',
        doc     => "Color of bleed border (default: 'none' = transparent)",
    );    #                                                            }}}1

    # attributes

    # _files                                                           {{{1
    has '_file_list' => (

        is          => 'lazy',
        isa         => Types::Standard::ArrayRef [Types::Standard::Str],
        handles_via => 'Array',
        handles     => { _files => 'elements' },
        doc         => 'Image files',
    );

    method _build__file_list () {

        my @matches;              # get unique file names
        for my $arg (@ARGV) { push @matches, glob "$arg"; }
        my @unique_matches = List::MoreUtils::uniq @matches;
        my @files = grep { $self->file_readable($_) }
            @unique_matches;      # ignore non-files
        if ( not( scalar @files ) ) {    # exit if no files specified
            warn "No image files specified\n";
            exit 1;
        }

        return [@files];

    }    #                                                             }}}1

    # methods

    # main()                                                           {{{1
    #
    # does:   main method
    # params: nil
    # prints: feedback
    # return: n/a, dies on failure
    method main () {

        my $resize = Dn::Cards::Resize->new(
            card_type             => $self->card_type,
            preserve_aspect_ratio => not $self->ignore_aspect_ratio,
            width                 => $self->width,
            height                => $self->height,
            bleed_horizontal      => $self->bleed_horizontal,
            bleed_vertical        => $self->bleed_vertical,
            bleed_color           => $self->bleed_color,
            image_files           => [ $self->_files ],
        );
        return $resize->resize_images;
    }    #                                                             }}}1

}

my $p = Dn::Internal->new_with_options->main;

1;

# POD                                                                  {{{1

__END__

=encoding utf8

=head1 NAME

dn-cards-resize - prepare card images for Printer's Studio

=head1 USAGE

B<dn-cards-resize> B<-t> I<card_type> I<glob> [I<glob> ...]

B<dn-cards-resize> B<--width> I<size> B<--height> I<size>
[B<--bleed_horizontal> I<size>] [B<--bleed_vertical> I<size>]
[B<--bleed_color> I<color>] I<glob> [I<glob> ...]

B<dn-cards-resize -h>

=head1 REQUIRED ARGUMENTS

=over

=item B<glob>

Glob specifying an image file or files. Specifying files other than image files
will result in the Image::Magick module dying when it attempts to load the
image, which also causes this script to die. String. Required.

=back

=head1 OPTIONS

=over

=item B<-t>  B<--card_type> I<type>

Specify the Printer's Studio game card type to be used. Available types are:
'bridge', 'european', 'euromini' (European Mini), 'large', 'mini', 'poker',
'square' and 'tarot'. String. Required.

See the L<Printer's Studio Custom Game Cards
page|http://www.printerstudio.com/unique-ideas/blank-playing-cards.html> for
details.

=item B<-i>  B<--ignore_aspect_ratio>

Stretch the image to fit the resized dimensions while ignoring
aspect ratio. This may result in the card image appearing distorted. Boolean. Optional. Default: false (i.e., preserve aspect ratio).

=item B<--width> I<size>

Width of resized image in pixels. Required unless using C<--card_type> option. Scalar intefer. No default value.

=item B<--height> I<size>

Height of resized image in pixels. Required unless using C<--card_type> option. Scalar intefer. No default value.

=item  B<--bleed_horizontal> I<size>

Size in pixels of bleed border for left and right sides of images. Optional.
Default: 0.

Note that if horizontal bleed remains set to zero no bleed border will be
added to the left and right sides of resized images.

=item  B<--bleed_vertical> I<size>

Size in pixels of bleed border for top and bottom sides of images. Optional.
Default: 0.

Note that if vertical bleed remains set to zero no bleed border will be
added to the top and bottom sides of resized images.

=item B<--bleed_color> I<color>

Color of the bleed border. String. Optional. Default: 'none' (transparent).

Available color schemes and colors are described in
the L<ImageMagick color
page|https://people.debian.org/~naoliv/misc/imagemagick/link/www/color.html>.
On debian systems the libimage-magick-perl package provides a similar page
at F</usr/share/doc/libimage-magick-perl/html/www/color.html>.

Note that setting bleed color without specifying bleed borders (C<--bleed_horizontal> and C<--bleed_vertical) will
have no effect.

=item B<-h>

Display help and exit.

=back

=head1 DESCRIPTION

This script resizes image files and saves them to the current directory,
overwriting any existing files with the same name. A "bleed border" of any
color can be added to the image as well.

Width and height, and and additional side and top/bottom bleed borders, can be
specified explicitly using the appropriate options. The script also
provides sensible default values for resizing images to suit Printer's Studio
game card types.

The user should specify resized dimensions with either C<--card_type>
S<< -- B<OR> -- >> C<--width> and C<--height> (and, optionally,
C<--bleed_horizontal> and C<--bleed_vertical>). In addition, the user can
optionally specify whether to ignore the original aspect ratio
(C<--ignore_aspect_ratio> option) and change the color of the bleed borders
(C<--bleed_color> option).

=head2 Resizing and aspect ratio

By default each image is resized to the maximum possible height and width to
fit onto the specified card type, while preserving the aspect ratio. If the
initial image has a markedly different aspect ratio to the resized dimensions,
the resizing process can result in significant blank space on the sides or
top/bottom of the resulting images.

If aspect ratio is not preserved (by using the C<--ignore_aspect_ratio> option)
the image is resized to fit the specified dimensions. That is, the images are
stretched vertically and horizontally to fit the new dimensions. If the initial
image has a markedly different aspect ratio to the resized dimensions, the
resizing process can result in significant distortion of the image.

=head2 Bleed border

Once the image is resized bleed borders can be added to the sides and
top/bottom of the image. This is done by setting the bleed borders to non-zero
(positive) values using the C<--bleed_horizontal> and C<--bleed_vertical>
options. The default is to make the bleed borders transparent. The bleed
borders can be changed to a particular color by setting the C<--bleed_color>
option.

=head2 Printer's Studio support

As noted earlier, this script provides support for converting images into
suitable dimensions for use as Printer's Studio game cards. The following table
shows the physical dimensions of the available card types and the size in
pixels used by this script. It is assumed that for all images the vertical
resolution is the same as the horizontal resolution.

 Card type     | Option     Height   Width  Height  Width
               | value       (mm)     (mm)   (px)    (px)
 --------------|-----------------------------------------
 Bridge        | bridge       89      57     2100    1346
 European      | european     88      63     2076    1488
 European Mini | euromini     67      44     1581    1039
 Large         | large       146      89     3445    2102
 Mini          | mini         63.5    44.45  1498    1050
 Poker         | poker        89      63.5   2100    1500
 Square        | square       70      70     1652    1654
 Tarot         | tarot       121      70     2855    1654

A bleed border of 70 pixels is added to each side of the resized images.

=head2 Overwriting files

The original files are overwritten by the transformed images so it advisable to
save copies of them before running this script.

=head2 Duplicate file names

The input files are specified by file paths which can involve multiple
directory paths. It is possible, therefor, that input image files in different
directories could have the same file name.

All output image files, by contrast, are written to the current working
directory. Output image file names are are the same as their input ("parent")
image files, ignoring the input images' directories. Since there can be
duplicate input image file names in a set of input images, there can be
duplicate output image file names in the corresponding set of output image
files. For that reason, the C<resize_images> method will abort if it detects
multiple input filepaths with identical file names.

=head1 DEPENDENCIES

=head2 Perl modules

autodie, Dn::Cards::Resize, Dn::Role::HasPath, English, List::MoreUtils, Moo,
MooX::HandlesVia, MooX::Options, namespace::clean, Readonly, strictures,
Types::Standard, version.

=head1 BUGS AND LIMITATIONS

Please report any bugs to the author.

=head1 AUTHOR

David Nebauer (david at nebauer dot org)

=head1 LICENSE AND COPYRIGHT

Copyright (c) 2017 David Nebauer (david at nebauer dot org)

This script is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.

=cut

# vim:fdm=marker
