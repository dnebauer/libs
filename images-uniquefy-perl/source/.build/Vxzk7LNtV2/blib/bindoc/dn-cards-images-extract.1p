.\" Automatically generated by Pod::Man 4.07 (Pod::Simple 3.32)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DN-CARDS-IMAGES-EXTRACT 1p"
.TH DN-CARDS-IMAGES-EXTRACT 1p "2017-03-07" "perl v5.24.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
dn\-cards\-images\-extract \- extract card images from pdf page images
.SH "USAGE"
.IX Header "USAGE"
\&\fBdn-cards-images-extract\fR \fB\-c\fR \fIfile\fR [\fB\-t\fR] \fIglob\fR [\fIglob\fR ...]
.PP
\&\fBdn-cards-images-extract \-h\fR
.SH "REQUIRED ARGUMENTS"
.IX Header "REQUIRED ARGUMENTS"
.IP "\fBglob\fR" 4
.IX Item "glob"
Glob specifying an image file or files. Specifying files other than image files
will result in the Image::Magick module dying when it attempts to load the
image, which also causes this script to die. String. Required.
.SH "REQUIRED OPTIONS"
.IX Header "REQUIRED OPTIONS"
.IP "\fB\-c\fR  \fB\-\-coords_file\fR" 4
.IX Item "-c --coords_file"
Path to coordinates file.
.Sp
String. Required.
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\fB\-t\fR  \fB\-\-template\fR" 4
.IX Item "-t --template"
Write example template file \fIcoords.yaml\fR and exit. Will not overwrite an
existing file. Boolean. Optional. Default: false.
.IP "\fB\-h\fR" 4
.IX Item "-h"
Display help and exit.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This script extracts rectangular regions from specified image files. It assumes
the rectangular region sides are truly vertical and horizontal. It also assumes
the regions occur in the same locations on each of the specified image files,
i.e., the top-left and bottom-right pixels of the regions have the same (x, y)
coordinates in each image.
.PP
Note: game cards are commonly available in digital form from BoardGameGeek and
other sites in multipage pdf files where the pdf pages each contain multiple
card images in the same locations, e.g., a 3\-by\-3 arrangement. If pdf pages are
extracted as individual image files, this script can process them to extract
the individual card images.
.SS "Region coordinates"
.IX Subsection "Region coordinates"
The locations of the rectangular regions on the images are provided in a
coordinates file. This file is in yaml format. For each rectangular region the
x and y coordinates of its top-left and bottom-right pixel are provided. Note
that the coordinates origin point is at the top-left corner of the image, and x
and y coordinates number positively right and down from there, respectively.
The top-left pixel is (0, 0) and the bottom-right pixel has the largest x and y
coordinates.
.PP
Here is an example coordinates file:
.PP
.Vb 10
\& \-\-\-
\& \-
\&   top_left:
\&     \- 975
\&     \- 1262
\&   bottom_right:
\&     \- 1723
\&     \- 2314
\& \-
\&   top_left:
\&     \- 1786
\&     \- 1262
\&   bottom_right:
\&     \- 2534
\&     \- 2314
\& \-
\&   top_left:
\&     \- 2598
\&     \- 1262
\&   bottom_right:
\&     \- 3346
\&     \- 2314
.Ve
.PP
\&\f(CW\*(C`top_left\*(C'\fR and \f(CW\*(C`bottom_right\*(C'\fR are the top-left and bottom-right pixel,
respectively, of each rectangular region. For each pixel the x and y
coordinates are listed, with the x coordinate followed by the y coordinate.
.SS "Output files"
.IX Subsection "Output files"
Output files are named like \fI\s-1BASE_XX.SUFFIX\s0\fR where '\s-1BASE\s0' and '\s-1SUFFIX\s0' are the
base name and suffix of the parent image file, and '\s-1XX\s0' is the individual
number of the extracted image. The output files are numbered from 1 in the
order in which they are specified in the coordinate file. The numbers are
left-padded with zeroes to ensure correct alphabetical sorting. The number of
padded zeroes depends on the total number of output files. For example, if
there are eight output files the third output file is numbered '3', but if
there are 18 output files the third output file is numbered '03', and so on.
.SS "Overwriting files"
.IX Subsection "Overwriting files"
Output files are written to the current directory. Existing files of the same
name are silently overwritten.
.SS "Duplicate file names"
.IX Subsection "Duplicate file names"
The input files are specified by file paths which can involve multiple
directory paths. It is possible, therefor, that input image files in different
directories could have the same file name.
.PP
All output image files, by contrast, are written to the current working
directory. Output image file names are derived from the names of their input
(\*(L"parent\*(R") image files, ignoring the input images' directories. Since there can
be duplicate input image file names in a set of input images, there can be
duplicate output image file names in the corresponding set of output image
files. For that reason, the \f(CW\*(C`extract_images\*(C'\fR method will abort if it detects
multiple input filepaths with identical file names.
.SH "DEPENDENCIES"
.IX Header "DEPENDENCIES"
.SS "Perl modules"
.IX Subsection "Perl modules"
Dn::Role::HasPath, English, Function::Parameters, List::MoreUtils, Moo,
MooX::HandlesVia, MooX::Options, namespace::clean, Readonly, strictures,
Types::Standard, version.
.SH "BUGS AND LIMITATIONS"
.IX Header "BUGS AND LIMITATIONS"
Please report any bugs to the author.
.SH "AUTHOR"
.IX Header "AUTHOR"
David Nebauer (david at nebauer dot org)
.SH "LICENSE AND COPYRIGHT"
.IX Header "LICENSE AND COPYRIGHT"
Copyright (c) 2017 David Nebauer (david at nebauer dot org)
.PP
This script is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
