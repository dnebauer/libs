#!/usr/bin/perl

use Moo;    #                                                          {{{1
use strictures 2;
use 5.006;
use 5.22.1;
use version; our $VERSION = qv('0.1');
use namespace::clean;    #                                             }}}1

{

    package Dn::Internal;

    use Moo;             # {{{1
    use strictures 2;
    use namespace::clean -except => [ '_options_data', '_options_config' ];
    use Dn::Images::Resize;
    use English qw(-no_match_vars);
    use Function::Parameters;
    use List::MoreUtils qw(uniq);
    use MooX::HandlesVia;
    use MooX::Options protect_argv => 0;
    use Readonly;
    use Types::Standard;

    with qw(
        Dn::Role::HasPath
    );

    Readonly my $TRUE  => 1;
    Readonly my $FALSE => 0;    #                                      }}}1

    # options

    # ignore_aspect_ratio (-i)                                         {{{1
    option 'ignore_aspect_ratio' => (
        is    => 'ro',
        short => 'i',
        doc   => 'Enlarge in both axes to new size, ignoring aspect ratio',
    );

    # fill_color          (-f)                                         {{{1
    option 'fill_color' => (
        is      => 'ro',
        format  => 's',
        default => 'none',
        short   => 'f',
        doc     => "Fill color (default: 'none' = transparent)",
    ); #                                                            }}}1
       # width            (-w)                                            {{{1
    option 'width' => (
        is       => 'ro',
        format   => 'i',
        default  => 0,
        short    => 'w',
        doc      => 'Resize width in pixels',
    );

    # height              (-t)                                         {{{1
    option 'height' => (
        is       => 'ro',
        format   => 'i',
        default  => 0,
        short    => 't',
        doc      => 'Resize height in pixels',
    );

    # border_horizontal   (-s)                                         {{{1
    option 'border_horizontal' => (
        is      => 'ro',
        format  => 'i',
        default => 0,
        short   => 's',
        doc     => 'Size of left and right borders in pixels',
    );

    # border_vertical     (-v)                                         {{{1
    option 'border_vertical' => (
        is      => 'ro',
        format  => 'i',
        default => 0,
        short   => 'v',
        doc     => 'Size of top and bottom borders in pixels',
    );    #                                                            }}}1

    # attributes

    # _files                                                           {{{1
    has '_file_list' => (

        is          => 'lazy',
        isa         => Types::Standard::ArrayRef [Types::Standard::Str],
        handles_via => 'Array',
        handles     => { _files => 'elements' },
        doc         => 'Image files',
    );

    method _build__file_list () {

        my @matches;              # get unique file names
        for my $arg (@ARGV) { push @matches, glob "$arg"; }
        my @unique_matches = List::MoreUtils::uniq @matches;
        my @files = grep { $self->file_readable($_) }
            @unique_matches;      # ignore non-files
        if ( not( scalar @files ) ) {    # exit if no files specified
            warn "No image files specified\n";
            exit 1;
        }

        return [@files];

    }    #                                                             }}}1

    # methods

    # main()                                                           {{{1
    #
    # does:   main method
    # params: nil
    # prints: feedback
    # return: n/a, dies on failure
    method main () {

        my $resize = Dn::Images::Resize->new(
            preserve_aspect_ratio => ( not $self->ignore_aspect_ratio ),
            width                 => $self->width,
            height                => $self->height,
            fill_color            => $self->fill_color,
            border_horizontal     => $self->border_horizontal,
            border_vertical       => $self->border_vertical,
            image_files           => [ $self->_files ],
        );
        return $resize->resize_images;
    }    #                                                             }}}1

}

my $p = Dn::Internal->new_with_options->main;

1;

# POD                                                                  {{{1

__END__

=encoding utf8

=head1 NAME

dn-images-resize - resize images and optionally add a border

=head1 USAGE

B<dn-images-resize> [B<-w> I<size> B<-t> I<size>] [B<-i>] [B<-f> I<color>]
[B<-s> I<size>] [B<-v> I<size>] I<glob> ...

B<dn-images-resize -h>

=head1 REQUIRED ARGUMENTS

=over

=item B<glob>

Glob specifying an image file or files. Specifying files other than image files
will result in the Image::Magick module dying when it attempts to load the
image, which also causes this script to die. String. Required.

=back

=head1 OPTIONS

=over

=item B<-w>  B<--width> I<size>

Width of resized image in pixels. Scalar integer. Optional. No default value.

If neither C<--width> or C<--height> are provided the image is not resized,
though borders may be added if C<--border_horizontal> and/or
C<--border_vertical> are provided.

=item B<-t>  B<--height> I<size>

Height of resized image in pixels. Scalar integer. Optional. No default value.

If neither C<--width> or C<--height> are provided the image is not resized,
though borders may be added if C<--border_horizontal> and/or
C<--border_vertical> are provided.

=item B<-i>  B<--ignore_aspect_ratio>

Stretch the image to fit the resized dimensions while ignoring aspect ratio.
The resulting image may appear distorted. Boolean.  Optional.  Default: false
(i.e., preserve aspect ratio).

=item B<-f>  B<--fill_color> I<color>

Color used for additional space added to the image when resizing (when aspect
ratio is preserved). This color is also used for the borders. Optional.
Default: 'none' (transparent).

Available color schemes and colors are described in
the L<ImageMagick color
page|https://people.debian.org/~naoliv/misc/imagemagick/link/www/color.html>.
On debian systems the libimage-magick-perl package provides a similar page
at F</usr/share/doc/libimage-magick-perl/html/www/color.html>.

Note that setting fill color will have no effect on the final image if aspect
ratio is ignored (because the image is stretched to occupy the entire resized
dimensions) and borders are set to zero width.

=item B<-s>  B<--border_horizontal> I<size>

Size in pixels of border for left and right sides of images. Positive integer.
Optional. Default: 0.

Note that if the horizontal border remains set to zero no border will be added
to the left and right sides of resized images.

=item B<-v>  B<--border_vertical> I<size>

Size in pixels of border for top and bottom sides of images. Positive integer.
Optional. Default: 0.

Note that if the vertical border remains set to zero no border will be added to
the top and bottom sides of resized images.

=item B<-h>

Display help and exit.

=back

=head1 DESCRIPTION

This script resizes image files and saves them to the current directory,
overwriting any existing files with the same name. A border of any
color can be added to the image as well.

Width and height and, optionally, side and top/bottom borders, are
specified using appropriate options.

The user should specify resized dimensions with C<--width> and C<--height>
(and, optionally, C<--border_horizontal> and C<--border_vertical>). In
addition, the user can optionally specify whether to ignore the original aspect
ratio (C<--ignore_aspect_ratio> option) and change the color of the borders
(C<--fill_color> option).

=head2 Resizing and aspect ratio

By default each image is resized to the maximum possible height and width that
fits into the resized dimensions, while preserving the aspect ratio. If the
initial image has a markedly different aspect ratio to the resized dimensions,
the resizing process can result in significant blank space on the sides or
top/bottom of the resulting images. This new space is filled with the specified
fill color (C<--fill_color> option).

If aspect ratio is not preserved (by using the C<--ignore_aspect_ratio> option)
the image is resized to fit the specified dimensions. That is, the images are
stretched vertically and horizontally to fit the new dimensions. If the initial
image has a markedly different aspect ratio to the resized dimensions, the
resizing process can result in significant distortion of the image.

=head2 Borders

Once the image is resized borders can be added to the sides and top/bottom of
the image. This is done by setting the border sizes to non-zero (positive)
values using the C<--border_horizontal> and C<--border_vertical> options.  The
border color is set using the C<--fill_color> option; the default is to make
borders transparent.

=head2 Overwriting files

All transformed images are written to the current directory. If this is where
the original files were located they are silently overwritten, so it is
advisable to save copies of them before running this script. Any previously
written output files in this directory are also silently overwritten.

=head2 Duplicate file names

The input files are specified by file paths which can involve multiple
directory paths. It is possible, therefor, that input image files in different
directories could have the same file name.

All output image files, by contrast, are written to the current working
directory. Output image file names are the same as their input ("parent") image
files, ignoring the input images' directories. Since there can be duplicate
input image file names in a set of input images, there can be duplicate output
image file names in the corresponding set of output image files. For that
reason, the C<resize_images> method will abort if it detects multiple input
filepaths with identical file names.

=head1 DEPENDENCIES

=head2 Perl modules

Dn::Images::Resize, Dn::Role::HasPath, English, Function::Parameters,
List::MoreUtils, Moo, MooX::HandlesVia, MooX::Options, namespace::clean,
Readonly, strictures, Types::Standard, version.

=head1 BUGS AND LIMITATIONS

Please report any bugs to the author.

=head2 SEE ALSO

=over

=item S<< C<dn-images-printerstudio-resize> >>

This script enables resizing of images for printing by Printer's Studio as
custom game cards.

=back

=head1 AUTHOR

David Nebauer (david at nebauer dot org)

=head1 LICENSE AND COPYRIGHT

Copyright (c) 2017 David Nebauer (david at nebauer dot org)

This script is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.

=cut

# vim:fdm=marker
