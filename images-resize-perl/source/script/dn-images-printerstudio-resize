#!/usr/bin/perl

use Moo;    #                                                          {{{1
use strictures 2;
use 5.006;
use 5.22.1;
use version; our $VERSION = qv('0.1');
use namespace::clean;    #                                             }}}1

{

    package Dn::Internal;

    use Moo;             # {{{1
    use strictures 2;
    use namespace::clean -except => [ '_options_data', '_options_config' ];
    use Dn::Images::Resize;
    use English qw(-no_match_vars);
    use Function::Parameters;
    use List::MoreUtils qw(uniq);
    use MooX::HandlesVia;
    use MooX::Options protect_argv => 0;
    use Readonly;
    use Types::Standard;

    with qw(
        Dn::Role::HasPath
    );

    Readonly my $TRUE  => 1;
    Readonly my $FALSE => 0;    #                                      }}}1

    # options

    # card_type           (-t)                                         {{{1
    option 'card_type' => (
        is       => 'ro',
        format   => 's',
        required => $TRUE,
        short    => 't',
        doc      => q{Card type ('bridge', 'european', 'euromini', }
            . q{'large', 'mini', 'poker', 'square', 'tarot')},
    );

    # ignore_aspect_ratio (-i)                                         {{{1
    option 'ignore_aspect_ratio' => (
        is    => 'ro',
        short => 'i',
        doc   => 'Ignore aspect ratio when resizing image',
    );

    # fill_color          (-f)                                         {{{1
    option 'fill_color' => (
        is      => 'ro',
        format  => 's',
        default => 'none',
        short   => 'f',
        doc     => "Fill color (default: 'none' = transparent)",
    );    #                                                            }}}1

    # attributes

    # _files                                                           {{{1
    has '_file_list' => (

        is          => 'lazy',
        isa         => Types::Standard::ArrayRef [Types::Standard::Str],
        handles_via => 'Array',
        handles     => { _files => 'elements' },
        doc         => 'Image files',
    );

    method _build__file_list () {

        my @matches;              # get unique file names
        for my $arg (@ARGV) { push @matches, glob "$arg"; }
        my @unique_matches = List::MoreUtils::uniq @matches;
        my @files = grep { $self->file_readable($_) }
            @unique_matches;      # ignore non-files
        if ( not( scalar @files ) ) {    # exit if no files specified
            warn "No image files specified\n";
            exit 1;
        }

        return [@files];

    }

   # _card, _valid_card                                                   {{{1
    has '_card_dimensions' => (
        is  => 'lazy',
        isa => Types::Standard::HashRef [
            Types::Standard::InstanceOf ['Dn::Images::Resize::Dimensions']
        ],
        handles_via => 'Hash',
        handles     => {
            _card       => 'get',
            _valid_card => 'exists',
        },
        doc => q[ Card dimensions ],
    );

    method _build__card_dimensions () {

       # bridge                                                           {{{2
        my $bridge = Dn::Images::Resize::Dimensions->new(
            width             => 1346,
            height            => 2100,
            border_horizontal => 70,
            border_vertical   => 70,
        );

       # european                                                         {{{2
        my $european = Dn::Images::Resize::Dimensions->new(
            width             => 1488,
            height            => 2076,
            border_horizontal => 70,
            border_vertical   => 70,
        );

       # european mini                                                    {{{2
        my $euromini = Dn::Images::Resize::Dimensions->new(
            width             => 1039,
            height            => 1581,
            border_horizontal => 70,
            border_vertical   => 70,
        );

       # large                                                            {{{2
        my $large = Dn::Images::Resize::Dimensions->new(
            width             => 2102,
            height            => 3445,
            border_horizontal => 70,
            border_vertical   => 70,
        );

       # mini                                                             {{{2
        my $mini = Dn::Images::Resize::Dimensions->new(
            width             => 1050,
            height            => 1498,
            border_horizontal => 70,
            border_vertical   => 70,
        );

       # poker                                                            {{{2
        my $poker = Dn::Images::Resize::Dimensions->new(
            width             => 1500,
            height            => 2100,
            border_horizontal => 70,
            border_vertical   => 70,
        );

       # square                                                           {{{2
        my $square = Dn::Images::Resize::Dimensions->new(
            width             => 1654,
            height            => 1654,
            border_horizontal => 70,
            border_vertical   => 70,
        );

       # tarot                                                            {{{2
        my $tarot = Dn::Images::Resize::Dimensions->new(
            width             => 1654,
            height            => 2855,
            border_horizontal => 70,
            border_vertical   => 70,
        );

       # return types                                                     {{{2
        return {
            bridge   => $bridge,
            european => $european,
            euromini => $euromini,
            large    => $large,
            mini     => $mini,
            poker    => $poker,
            square   => $square,
            tarot    => $tarot,
        };   #                                                            }}}2

    }   #                                                                 }}}1

    # methods

    # main()                                                           {{{1
    #
    # does:   main method
    # params: nil
    # prints: feedback
    # return: n/a, dies on failure
    method main () {

        # check card type
        my $type = $self->card_type;
        die "Invalid card type '$type'\n" if not $self->_valid_card($type);

        # get card dimensions
        my $card = $self->_card($type);

        # resize image
        my $resize = Dn::Images::Resize->new(
            preserve_aspect_ratio => ( not $self->ignore_aspect_ratio ),
            width                 => $card->width,
            height                => $card->height,
            fill_color            => $self->fill_color,
            border_horizontal     => $card->border_horizontal,
            border_vertical       => $card->border_vertical,
            image_files           => [ $self->_files ],
        );
        return $resize->resize_images;
    }    #                                                             }}}1

}

my $p = Dn::Internal->new_with_options->main;

1;

# POD                                                                  {{{1

__END__

=encoding utf8

=head1 NAME

dn-images-resize - prepare card images for Printer's Studio

=head1 USAGE

B<dn-images-resize> B<-t> I<card_type> [B<-i>] [B<-f> I<color>] I<glob> ...

B<dn-cards-resize -h>

=head1 REQUIRED ARGUMENTS

=over

=item B<-t>  B<--card_type> I<type>

Specify the Printer's Studio game card type to be used. Available types are:
'bridge', 'european', 'euromini' (European Mini), 'large', 'mini', 'poker',
'square' and 'tarot'. String. Required.

See the L<Printer's Studio Custom Game Cards
page|http://www.printerstudio.com/unique-ideas/blank-playing-cards.html> for
details.

=item B<glob>

Glob specifying an image file or files. Specifying files other than image files
will result in the Image::Magick module dying when it attempts to load the
image, which also causes this script to die. String. Required.

=back

=head1 OPTIONS

=over

=item B<-i>  B<--ignore_aspect_ratio>

Stretch the image to fit the resized dimensions while ignoring
aspect ratio. This may result in the card image appearing distorted. Boolean.
Optional. Default: false (i.e., preserve aspect ratio).

=item B<-f>  B<--fill_color> I<color>

Color used for additional space added to the image when resizing (when aspect
ratio is preserved). This color is also used for the bleed borders. Optional.
Default: 'none' (transparent).

Available color schemes and colors are described in
the L<ImageMagick color
page|https://people.debian.org/~naoliv/misc/imagemagick/link/www/color.html>.
On debian systems the libimage-magick-perl package provides a similar page
at F</usr/share/doc/libimage-magick-perl/html/www/color.html>.

=item B<-h>

Display help and exit.

=back

=head1 DESCRIPTION

This script modifies image files for use in printing custom game cards by
Printer's Studio. The images are scaled or stretched to the appropriate card
size and bleed borders are added. The resulting image files are saved to the
current directory, overwriting any existing files with the same name.

The user specifies the type of game card to be printed using C<--card_type>. In
addition, the user can optionally specify whether to ignore the original aspect
ratio (C<--ignore_aspect_ratio> option) and change the color of the bleed
borders (C<--fill_color> option).

=head2 Resizing and aspect ratio

By default each image is resized to the maximum possible height and width to
fit onto the specified card type, while preserving the aspect ratio. If the
initial image has a markedly different aspect ratio to the resized dimensions,
the resizing process can result in significant blank space on the sides or
top/bottom of the resulting images. This new space is filled with the specified
fill color (C<--fill_color> option).

If aspect ratio is not preserved (by using the C<--ignore_aspect_ratio> option)
the image is resized to fit the specified dimensions. That is, the images are
stretched vertically and horizontally to fit the new dimensions. If the initial
image has a markedly different aspect ratio to the resized dimensions, the
resizing process can result in significant distortion of the image.

=head2 Bleed border

Once the image is resized bleed borders are added to the sides and top/bottom
of the image. The bleed border color is set using the C<--fill_color> option;
the default is to make the bleed borders transparent.

=head2 Printer's Studio image dimensions

The following table shows the physical dimensions of the available Printer's
Studio card types and the size in pixels used by this script. It is assumed
that for all images the vertical resolution is the same as the horizontal
resolution.

 Card type     | Option     Height   Width  Height  Width
               | value       (mm)     (mm)   (px)    (px)
 --------------|-----------------------------------------
 Bridge        | bridge       89      57     2100    1346
 European      | european     88      63     2076    1488
 European Mini | euromini     67      44     1581    1039
 Large         | large       146      89     3445    2102
 Mini          | mini         63.5    44.45  1498    1050
 Poker         | poker        89      63.5   2100    1500
 Square        | square       70      70     1654    1654
 Tarot         | tarot       121      70     2855    1654

A bleed border of 70 pixels is added to each side of the resized images.

=head2 Overwriting files

All transformed images are written to the current directory. If this is where
the original files were located they are silently overwritten, so it is
advisable to save copies of them before running this script. Any previously
written output files in this directory are also silently overwritten.

=head2 Duplicate file names

The input files are specified by file paths which can involve multiple
directory paths. It is possible, therefor, that input image files in different
directories could have the same file name.

All output image files, by contrast, are written to the current working
directory. Output image file names are the same as their input ("parent") image
files, ignoring the input images' directories. Since there can be duplicate
input image file names in a set of input images, there can be duplicate output
image file names in the corresponding set of output image files. For that
reason, the C<resize_images> method will abort if it detects multiple input
filepaths with identical file names.

=head1 DEPENDENCIES

=head2 Perl modules

Dn::Images::Resize, Dn::Role::HasPath, English, Function::Parameters,
List::MoreUtils, Moo, MooX::HandlesVia, MooX::Options, namespace::clean,
Readonly, strictures, Types::Standard, version.

=head1 BUGS AND LIMITATIONS

Please report any bugs to the author.

=head1 AUTHOR

David Nebauer (david at nebauer dot org)

=head1 LICENSE AND COPYRIGHT

Copyright (c) 2017 David Nebauer (david at nebauer dot org)

This script is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.

=cut

# vim:fdm=marker
