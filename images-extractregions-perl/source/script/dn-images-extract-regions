#!/usr/bin/perl

use Moo;    #                                                          {{{1
use strictures 2;
use 5.006;
use 5.22.1;
use version; our $VERSION = qv('0.1');
use namespace::clean;    #                                             }}}1

{

    package Dn::Internal;

    use Moo;             # {{{1
    use strictures 2;
    use namespace::clean -except => [ '_options_data', '_options_config' ];
    use Dn::Images::ExtractRegions;
    use English qw(-no_match_vars);
    use Function::Parameters;
    use List::MoreUtils qw(uniq);
    use MooX::HandlesVia;
    use MooX::Options protect_argv => 0;
    use Readonly;
    use Types::Standard;

    with qw(
        Dn::Role::HasPath
    );

    Readonly my $TRUE  => 1;
    Readonly my $FALSE => 0;    #                                      }}}1

    # options

    # coords_file (-c)                                                 {{{1
    option 'coords_file' => (
        is      => 'ro',
        format  => 's',
        default => q{},
        short   => 'c',
        doc     => q[ Coordinates file (default: 'coords.yaml') ],
    );

    # template    (-t)                                                 {{{1
    option 'template' => (
        is    => 'ro',
        short => 't',
        doc   => q[ Write template for coordinates file ],
    );    #                                                            }}}1

    # attributes

    # _files                                                           {{{1
    has '_file_list' => (
        is          => 'lazy',
        isa         => Types::Standard::ArrayRef [Types::Standard::Str],
        handles_via => 'Array',
        handles     => { _files => 'elements' },
        doc         => 'PDF page image files',
    );

    method _build__file_list () {

        my @matches;              # get unique file names
        for my $arg (@ARGV) { push @matches, glob "$arg"; }
        my @unique_matches = List::MoreUtils::uniq @matches;
        my @files = grep { $self->file_readable($_) }
            @unique_matches;      # ignore non-files

        return [@files];
    }    #                                                             }}}1

    # methods

    # main()                                                           {{{1
    #
    # does:   main method
    # params: nil
    # prints: feedback
    # return: n/a, dies on failure
    method main () {

        my $extract     = Dn::Images::ExtractRegions->new;
        my $coords_file = $self->coords_file;
        if ($coords_file) { $extract->coords_file($coords_file); }

        if ( $self->template ) {    # template option takes precedence
            $extract->write_coords_file_template;
        }
        else {                      # extract images
            $extract->add_image_files( $self->_files );
            return $extract->extract_images;
        }

        return;
    }    #                                                             }}}1

}

my $p = Dn::Internal->new_with_options->main;

1;

# POD                                                                  {{{1

__END__

=encoding utf8

=head1 NAME

dn-images-extract-regions - extract regions from a series of images

=head1 USAGE

B<dn-images-extract-regions> B<-c> I<file> [B<-t>] I<glob> [I<glob> ...]

B<dn-images-extract-regions -h>

=head1 REQUIRED ARGUMENTS

=over

=item B<glob>

Glob specifying an image file or files. Specifying files other than image files
will result in the Image::Magick module dying when it attempts to load the
image, which also causes this script to die. String. Required.

=back

=head1 OPTIONS

=over

=item B<-c>  B<--coords_file> I<filepath>

Path to coordinates file. String. Optional. Default: 'coords.yaml' in current
directory.

=item B<-t>  B<--template>

Write example template file and exit. Path of output file is set by the
S<< C<--coords_file> >> option. Will not overwrite an existing file. Boolean.
Optional. Default: false.

=item B<-h>

Display help and exit.

=back

=head1 DESCRIPTION

This script extracts rectangular regions from specified image files. It assumes
the rectangular region sides are truly vertical and horizontal. It also assumes
the regions occur in the same locations on each of the specified image files,
i.e., the top-left and bottom-right pixels of the regions have the same (x, y)
coordinates in each image.

=head2 Region coordinates

The locations of the rectangular regions on the images are provided in a
coordinates file. This file is in yaml format. For each rectangular region the
x and y coordinates of its top-left and bottom-right pixel are provided. Note
that the coordinates origin point is at the top-left corner of the image, and x
and y coordinates number positively right and down from there, respectively.
The top-left pixel is (0, 0) and the bottom-right pixel has the largest x and y
coordinates.

Here is an example coordinates file:

 ---
 -
   top_left:
     - 975
     - 1262
   bottom_right:
     - 1723
     - 2314
 -
   top_left:
     - 1786
     - 1262
   bottom_right:
     - 2534
     - 2314
 -
   top_left:
     - 2598
     - 1262
   bottom_right:
     - 3346
     - 2314

C<top_left> and C<bottom_right> are the top-left and bottom-right pixel,
respectively, of each rectangular region. For each pixel the x and y
coordinates are listed, with the x coordinate followed by the y coordinate.

This script is usually distributed with a LibreOffice/OpenOffice spreadsheet
called S<< F<coords-nine-regions.ods> >>. On debian systems it is usually
installed at S<< F</usr/share/libdn-images-extractregions-perl/> >>. The
spreadsheet is meant to help with images having nine rectangular regions in a
3x3 layout. Users enter necessary x and y coordinates and press a button to
write a S<< <F<coords.yaml> >> file in the current directory. The spreadsheet
assumes the rectangular regions are exactly the same in size and are aligned in
a perfect grid.

=head2 Output files

Output files are named like F<BASE_XX.SUFFIX> where 'BASE' and 'SUFFIX' are the
base name and suffix of the parent image file, and 'XX' is the individual
number of the extracted image. The output files are numbered from 1 in the
order in which they are specified in the coordinate file. The numbers are
left-padded with zeroes to ensure correct alphabetical sorting. The number of
padded zeroes depends on the total number of output files. For example, if
there are eight output files the third output file is numbered '3', but if
there are 18 output files the third output file is numbered '03', and so on.

=head2 Overwriting files

Output files are written to the current directory. Existing files of the same
name are silently overwritten.

=head2 Duplicate file names

The input files are specified by file paths which can involve multiple
directory paths. It is possible, therefor, that input image files in different
directories could have the same file name.

All output image files, by contrast, are written to the current working
directory. Output image file names are derived from the names of their input
("parent") image files, ignoring the input images' directories. Since there can
be duplicate input image file names in a set of input images, there can be
duplicate output image file names in the corresponding set of output image
files. For that reason, the C<extract_images> method will abort if it detects
multiple input filepaths with identical file names.

=head1 DEPENDENCIES

=head2 Perl modules

Dn::Images::ExtractRegions, Dn::Role::HasPath, English, Function::Parameters,
List::MoreUtils, Moo, MooX::HandlesVia, MooX::Options, namespace::clean,
Readonly, strictures, Types::Standard, version.

=head1 BUGS AND LIMITATIONS

When processing large pdf files it is possible to exceed the cache resources
available to the underlying ImageMagick application, resulting in a fatal
error. See L<Dn::Role::HasImage/"Exhausting cache resources"> for further
details.

Please report any bugs to the author.

=head1 AUTHOR

David Nebauer (david at nebauer dot org)

=head1 LICENSE AND COPYRIGHT

Copyright (c) 2017 David Nebauer (david at nebauer dot org)

This script is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.

=cut

# vim:fdm=marker
