#!/usr/bin/perl

use Moo;                                  # {{{1
use strictures 2;
use 5.036_001;
use namespace::clean;
use version; our $VERSION = qv('0.1');    # }}}1

{

  package Dn::Internal;

  use Moo;                                # {{{1
  use namespace::clean -except => [ '_options_data', '_options_config' ];
  use Const::Fast;
  use Dn::CommonBash;
  use MooX::Options (
    authors     => 'David Nebauer <david at nebauer dot org>',
    description => 'The user selects a function from the libdncommon-bash'
        . ' library The list of function names is filtered to display only'
        . ' those containing the text fragment. Exact matches take'
        . ' precedence over partial matches. That is, if the filter exactly'
        . ' matches a function name that function will be displayed, even if'
        . ' the filter partially matches other functions. Once a function is'
        . ' selected, information about it is then displayed.',
    protect_argv => 0,
  );

  with qw(Role::Utils::Dn);

  my $library = Dn::CommonBash->new();

  const my $TRUE  => 1;
  const my $FALSE => 0;
  const my $STORE => q{@pkgdata_dir@/perlfuncdata};    ## no critic (RequireInterpolationOfMetachars)

  # }}}1

  # Options

  # name_filter (-f) {{{1
  option ' name_filter ' => (
    is            => ' rw ',
    format        => 's',
    required      => $TRUE,
    short         => 'f',
    documentation => 'Part or all of a function name',
  );    # }}}1

  # Methods

  # run() {{{1
  #
  # does:   identify function and display its details
  # params: nil
  # prints: nil
  # return: n/a, dies on failure
  sub run ($self) {

    # user selects function to display
    my $funcname = $library->select_function($self->name_filter, $STORE);

    # display function information
    if ($funcname) {
      my @display = $library->display_function_details($funcname, $STORE);
      select STDOUT;    ## no critic (ProhibitOneArgSelect)
      $self->vim_list_print(@display);
    }
    return $TRUE;
  }    # }}}1

}

my $p = Dn::Internal->new_with_options->run;

1;

# POD {{{1

__END__

=head1 NAME

dn-bashcom-funcdata - display information on dncommon-bash library functions

=head1 USAGE

B<dn-bashcom-funcdata> filter

B<dn-bashcom-funcdata -h>

=head1 DESCRIPTION

The user selects a function from the libdncommon-bash library. The list of
function names is filtered to display only those containing the text fragment.

Exact matches take precedence over partial matches. That is, if the filter
exactly matches a function name that function will be displayed, even if the
filter partially matches other functions.

Once a function is selected, information about it is then displayed.

=head1 CONFIGURATION

This script requires no configuration files or environmental variables.

=head1 REQUIRED ARGUMENTS

=head2 name_filter

Filter function names to choose from, i.e., part of function name to match on.

=head1 OPTIONS

=head2 -h, --help

Display user help and exit.

=head1 EXIT STATUS

The exit code is 0 for successful execution and 1 if the script does a
controlled exit following an error. If the script crashes unexpectedly
the error code is that given by the system.

=head1 DIAGNOSTICS

This script is a wrapper for the Dn::CommonBash module.
See L<Dn::CommonBash/DIAGNOSTICS> for the diagnostic messages it emits.

=head1 INCOMPATIBILITIES

None reported.

=head1 BUGS AND LIMITATIONS

Please report any bugs to the author.

=head1 DEPENDENCIES

Const::Fast, Dn::CommonBash, Moo, MooX::Options, namespace::clean,
Role::Utils::Dn, strictures, version.

=head1 AUTHOR

David Nebauer E<lt>davidnebauer@hotkey.net.auE<gt>

=head1 LICENSE AND COPYRIGHT

Copyright (c) 2024 David Nebauer E<lt>david@nebauer.orgE<gt>

This script is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.

=cut
# vim: fdm=marker :
